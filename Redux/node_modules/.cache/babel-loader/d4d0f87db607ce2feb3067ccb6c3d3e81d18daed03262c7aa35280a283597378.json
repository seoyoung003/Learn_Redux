{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n//configureStore은 여러개의 리듀서를 하나의 리듀서로 합칠 수 있다. 객체를 인수로 준다다\n\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    incrementHandler(state) {\n      //if문이 필요없는 이유는 어떤 액션 했느냐에 따라 메서드가 자동으로 호출되기 때문이다.\n      state.counter++; //redux-toolkit과 createSlice를 사용하면 기존상태를 바꿀 수 없게한다 따라서서 다음과 같은 코드를 써도 된다.\n    },\n    decrementHandler(state) {\n      state.counter--;\n    },\n    increaseHandler(state, action) {\n      //increase는 다른 메서드와 다르게 추가 데이터가 필요하므로 action을 선택적으로 매개변수에 넣는다.\n      state.counter = state.counter + action.payload; //payload라는 정해진 이름의 속성에 접근해야한다.\n    },\n    toggleCounterHandler(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst AuthSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers\n});\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions; //액션 객체 생성해준다. 이 코드를 통해 counterSlice에서 일치하는 함수 실행행\n\nexport default store;\n\n// const counterReduxer = (state = initialState, action) => {  툴킷이 아닌 일반 리덕스 사용시\n//     if(action.type === 'increment') {\n//         return{\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if(action.type === 'increase') {\n//         return{\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if(action.type === 'decrement') {\n//         return {\n//             counter: state.counter -1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if(action.type === 'toggle') {\n//         return{\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n\n//     return state;\n// }","map":{"version":3,"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","incrementHandler","state","decrementHandler","increaseHandler","action","payload","toggleCounterHandler","initialAuthState","isAuthenticated","AuthSlice","store","reducer","counterActions","actions"],"sources":["C:/Users/USER/Desktop/React Udemy/Redux/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux' \r\nimport {createSlice, configureStore}  from '@reduxjs/toolkit'\r\n//configureStore은 여러개의 리듀서를 하나의 리듀서로 합칠 수 있다. 객체를 인수로 준다다\r\n\r\nconst initialCounterState = {counter: 0, showCounter: true}\r\n\r\nconst counterSlice = createSlice({\r\n    name:'counter',\r\n    initialState: initialCounterState,\r\n    reducers: {\r\n        incrementHandler(state) {//if문이 필요없는 이유는 어떤 액션 했느냐에 따라 메서드가 자동으로 호출되기 때문이다.\r\n            state.counter++; //redux-toolkit과 createSlice를 사용하면 기존상태를 바꿀 수 없게한다 따라서서 다음과 같은 코드를 써도 된다.\r\n        }, \r\n        decrementHandler(state) {\r\n            state.counter--;\r\n        },\r\n        increaseHandler(state, action) {//increase는 다른 메서드와 다르게 추가 데이터가 필요하므로 action을 선택적으로 매개변수에 넣는다.\r\n            state.counter = state.counter + action.payload;//payload라는 정해진 이름의 속성에 접근해야한다.\r\n        },\r\n        toggleCounterHandler(state) {\r\n            state.showCounter = !state.showCounter;\r\n        }\r\n    }\r\n});\r\n\r\nconst initialAuthState = {\r\n    isAuthenticated: false\r\n}\r\n\r\nconst AuthSlice = createSlice({\r\n    name: 'authentication',\r\n    initialState: initialAuthState,\r\n    reducers\r\n});\r\n\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: counterSlice.reducer\r\n});\r\nexport const counterActions = counterSlice.actions;//액션 객체 생성해준다. 이 코드를 통해 counterSlice에서 일치하는 함수 실행행\r\n\r\nexport default store;\r\n\r\n\r\n// const counterReduxer = (state = initialState, action) => {  툴킷이 아닌 일반 리덕스 사용시\r\n//     if(action.type === 'increment') {\r\n//         return{\r\n//             counter: state.counter + 1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     }\r\n\r\n//     if(action.type === 'increase') {\r\n//         return{\r\n//             counter: state.counter + action.amount,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     }\r\n\r\n//     if(action.type === 'decrement') {\r\n//         return {\r\n//             counter: state.counter -1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     }\r\n\r\n//     if(action.type === 'toggle') {\r\n//         return{\r\n//             showCounter: !state.showCounter,\r\n//             counter: state.counter\r\n//         }\r\n//     }\r\n\r\n//     return state;\r\n// }\r\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,SAAQC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAC7D;;AAEA,MAAMC,mBAAmB,GAAG;EAACC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAI,CAAC;AAE3D,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAC,SAAS;EACdC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACNC,gBAAgBA,CAACC,KAAK,EAAE;MAAC;MACrBA,KAAK,CAACP,OAAO,EAAE,CAAC,CAAC;IACrB,CAAC;IACDQ,gBAAgBA,CAACD,KAAK,EAAE;MACpBA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDS,eAAeA,CAACF,KAAK,EAAEG,MAAM,EAAE;MAAC;MAC5BH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO,CAAC;IACnD,CAAC;IACDC,oBAAoBA,CAACL,KAAK,EAAE;MACxBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMY,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AACrB,CAAC;AAED,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EAC1BM,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAES,gBAAgB;EAC9BR;AACJ,CAAC,CAAC;AAIF,MAAMW,KAAK,GAAGlB,cAAc,CAAC;EACzBmB,OAAO,EAAEf,YAAY,CAACe;AAC1B,CAAC,CAAC;AACF,OAAO,MAAMC,cAAc,GAAGhB,YAAY,CAACiB,OAAO,CAAC;;AAEnD,eAAeH,KAAK;;AAGpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}